; For all tests that run in Github Actions, see
; .github/workflows/cpu-ci.yml for the workflow definition.

[tox]
envlist = python3.8,test-gpu,test-cpu

[testenv]
commands =
    pip install --upgrade pip
    pip install .

[testenv:test-cpu]
; Runs in: Github Actions
; Runs all CPU-based tests. NOTE: if you are using an M1 mac, this will fail. You need to
; change the tensorflow dependency to `tensorflow-macos` in requirements-test-cpu.txt.
deps = -rrequirements-test-cpu.txt
commands = python -m pytest --cov-report term --cov=merlin -rxs tests/unit

[testenv:test-gpu]
sitepackages=true
; Runs in: Internal Jenkins
; Runs GPU-based tests.
; The jenkins jobs run on an image based on merlin-hugectr. This will include all cudf configuration
; and other gpu-specific libraries that we can enxpect will always exist. Thus, we don't need
; to install requirements.txt yet. As we get better at python environment isolation, we will
; need to add some back.
deps =
    pytest
    pytest-cov
commands =
    python -m pytest --cov-report term --cov merlin -rxs tests/unit

[testenv:test-models-cpu]
passenv=GIT_COMMIT
sitepackages=true
allowlist_externals = git
deps =
    -rrequirements.txt
    -rrequirements-dev.txt
commands =
    ; the GIT_COMMIT env is the current commit of the core repo
    ; NOTE!!!! We must clean this up in the jenkins configuration with `rm -rf "nvtabular-$GIT_COMMIT"`
    git clone --depth 1 https://github.com/NVIDIA-Merlin/models.git models-{env:GIT_COMMIT}
    git clone --depth 1 https://github.com/NVIDIA-Merlin/NVTabular.git nvtabular-{env:GIT_COMMIT}
    python -m pip install --upgrade ./models-{env:GIT_COMMIT}
    python -m pip install --upgrade ./nvtabular-{env:GIT_COMMIT}
    python -m pip install .

    ; this runs the tests then removes the models repo directory whether the tests work or fail
    python -m pytest models-{env:GIT_COMMIT}/tests/unit


[testenv:test-systems-cpu]
passenv=GIT_COMMIT
sitepackages=true
allowlist_externals = git
deps =
    -rrequirements.txt
    -rrequirements-dev.txt
commands =
    ; the GIT_COMMIT env is the current commit of the core repo
    ; NOTE!!!! We must clean this up afterward with `rm -rf "systems-$GIT_COMMIT"`
    git clone --depth 1 https://github.com/NVIDIA-Merlin/systems.git systems-{env:GIT_COMMIT}
    python -m pip install --upgrade ./systems-{env:GIT_COMMIT}[test-cpu]
    python -m pip install .

    ; this runs the tests then removes the systems repo directory whether the tests work or fail
    python -m pytest systems-{env:GIT_COMMIT}/tests/unit


[testenv:test-merlin]
; Runs in: Internal Jenkins
; This runs the end-to-end tests from the NVIDIA-Merlin/Merlin repo on the jenkins machine.
; We will check out `Merlin` from github and execute the notebooks using the current PR of core.
passenv=GIT_COMMIT
sitepackages=true
allowlist_externals = git
deps =
    -rrequirements-gpu.txt
commands =
    ; the GIT_COMMIT env is the current commit of the core repo
    ; NOTE!!!! We must clean this up in the jenkins configuration with `rm -rf "Merlin-$GIT_COMMIT"`
    git clone --depth 1 https://github.com/NVIDIA-Merlin/Merlin.git Merlin-{env:GIT_COMMIT}

    ; the downstream packages must be installed in reverse dependency
    ; order so that they overwrite any other versions installed by packages
    ; earlier on the list
    python -m pip install .

    ; this runs the tests then removes the Merlin repo directory whether the tests work or fail
    python -m pytest Merlin-{env:GIT_COMMIT}/tests/unit

[testenv:lint]
; Runs in: Github Actions
; Runs all lint/code checks and fails the PR if there are errors.
; Install pre-commit-hooks to run these tests during development.
deps = -rrequirements-dev.txt
commands =
    flake8 setup.py merlin/ tests/
    black --check --diff merlin tests
    pylint merlin tests
    isort -c merlin tests --skip .tox
    interrogate merlin tests --config=pyproject.toml
    codespell merlin tests --skip .tox

[testenv:docs]
; Runs in: Github Actions
; Generates documentation with sphinx. There are other steps in the Github Actions workflow
; to publish the documentation on release.
changedir = {toxinidir}
deps = -rrequirements-docs.txt
commands =
    python -m sphinx.cmd.build -P -b html docs/source docs/build/html

[testenv:docs-multi]
; Run the multi-version build that is shown on GitHub Pages.
changedir = {toxinidir}
deps = -rrequirements-docs.txt
commands =
    sphinx-multiversion --dump-metadata docs/source docs/build/html | jq "keys"
    sphinx-multiversion docs/source docs/build/html

