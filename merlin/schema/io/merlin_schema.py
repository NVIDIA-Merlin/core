# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: merlin_schema.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, List

import betterproto


class ElementUnit(betterproto.Enum):
    YEAR = 0
    MONTH = 1
    DAY = 2
    HOUR = 3
    MINUTE = 4
    SECOND = 5
    MILLISECOND = 6
    MICROSECOND = 7
    NANOSECOND = 8


class ElementType(betterproto.Enum):
    UNKNOWN = 0
    BOOL = 1
    INT = 2
    UINT = 3
    FLOAT = 4
    STRING = 5
    DATETIME = 6
    OBJECT = 7


@dataclass
class Dtype(betterproto.Message):
    name: str = betterproto.string_field(1)
    element_type: "ElementType" = betterproto.enum_field(2)
    element_size: int = betterproto.int64_field(3)
    element_unit: "ElementUnit" = betterproto.enum_field(4)
    signed: bool = betterproto.bool_field(5)


@dataclass
class Shape(betterproto.Message):
    # The dimensions that define the shape
    dim: List["ShapeDim"] = betterproto.message_field(1)


@dataclass
class ShapeDim(betterproto.Message):
    """An axis in a multi-dimensional feature representation."""

    size: int = betterproto.int64_field(1, group="dim_type")
    size_range: "ShapeDimRange" = betterproto.message_field(2, group="dim_type")


@dataclass
class ShapeDimRange(betterproto.Message):
    """The (potentially open-ended) range of values for this dimension"""

    min: int = betterproto.int64_field(2)
    max: int = betterproto.int64_field(3)


@dataclass
class Property(betterproto.Message):
    float_value: float = betterproto.double_field(1, group="prop_type")
    int_value: int = betterproto.int64_field(2, group="prop_type")
    string_value: str = betterproto.string_field(3, group="prop_type")


@dataclass
class IntDomain(betterproto.Message):
    name: str = betterproto.string_field(1)
    min: int = betterproto.int64_field(2)
    max: int = betterproto.int64_field(3)


@dataclass
class FloatDomain(betterproto.Message):
    """
    Since this is used for both 32 and 64 bit floats, the range has to be
    defined as a double
    """

    name: str = betterproto.string_field(1)
    min: float = betterproto.double_field(2)
    max: float = betterproto.double_field(3)


@dataclass
class Field(betterproto.Message):
    dtype: "Dtype" = betterproto.message_field(1)
    shape: "Shape" = betterproto.message_field(2)
    cardinality: int = betterproto.int64_field(3)
    tags: List[str] = betterproto.string_field(4)
    properties: Dict[str, "Property"] = betterproto.map_field(
        5, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )
    int_domain: "IntDomain" = betterproto.message_field(6, group="domain")
    float_domain: "FloatDomain" = betterproto.message_field(7, group="domain")
    name: str = betterproto.string_field(8)


@dataclass
class Schema(betterproto.Message):
    fields: List["Field"] = betterproto.message_field(1)
